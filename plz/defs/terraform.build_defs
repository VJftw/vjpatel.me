TERRAFORM_BINARY = "//third_party/tool:terraform"

# TODO: tests when building for terraform_module:
# - ensure no external module sources are unaccounted for
# TODO: tests when building for terraform:
# - ensure no external module sources are unaccounted for
# - maybe shift module deps management into this


def terraform(
    name: str,
    srcs: list,
    modules: list = [],
    providers: list = [],
):
    modules = [canonicalise(module) for module in modules]
    module_replace_scripts=[f"sed -i \"s#{module}#./modules/$(basename $(out_location {module}))#g\" $SRCS_SRCS" for module in modules]
    module_replace_script="\n".join(module_replace_scripts)
    working_dir=genrule(
        name = f"_{name}_wd",
        outs = [f"_{name}_wd"],
        tools = ["//third_party/tool:jq"],
        srcs = {
            "srcs": srcs,
            "modules": modules,
            "plugins": providers,
        },
        cmd = f"""
        set -euo pipefail
        jq=$(exe //third_party/tool:jq)
        mkdir -p $OUTS; 
        # copy plugins (providers)
        if [[ -v SRCS_PLUGINS ]]; then
            plugin_dir="$OUTS/.terraform/plugins/linux_amd64"
            mkdir -p "${{plugin_dir}}"
            echo "{{}}" > "${{plugin_dir}}/lock.json"
            for plugin in $SRCS_PLUGINS; do
                plugin_bin="$plugin/$(ls "$plugin" | head -n1)"
                cp $plugin_bin "${{plugin_dir}}/"
                plugin_hash=$(sha256sum "$plugin_bin" | cut -f1 -d" ")
                plugin_name=$(echo "$plugin_bin" | cut -f3 -d\- | cut -f1 -d\_)
                $jq ". + {{\\"$plugin_name\\": \\"$plugin_hash\\"}}" "${{plugin_dir}}/lock.json" > "${{plugin_dir}}/lock.json.tmp"
                mv "${{plugin_dir}}/lock.json.tmp" "${{plugin_dir}}/lock.json"
            done
        fi
        # copy modules
        if [[ -v SRCS_MODULES ]]; then
            module_dir="$OUTS/modules"
            mkdir -p "${{module_dir}}"
            for module in $SRCS_MODULES; do
                cp -r $module "${{module_dir}}/"
            done
            {module_replace_script}
        fi
        for src in $SRCS_SRCS; do 
            cp $src $OUTS/
        done
        """,
    )
    cmds = [
        ["init", "plan"],
        ["init", "apply"],
    ]
    for cmd in cmds:
        last_cmd_index=len(cmd) - 1
        last_cmd=cmd[last_cmd_index]
        
        joined_cmd=" ".join(cmd)
        sh_cmd(
            name = f"{name}_tf_{last_cmd}",
            shell = "/bin/bash",
            cmd = f"""
set -euo pipefail
abs="\\\$PWD"
cd $(out_location {working_dir})
export TF_CLI_ARGS_init="-get-plugins=false"
for cmd in {joined_cmd}; do
    echo "-> terraform \\\$cmd"
    "\\\$abs/$(out_exe {TERRAFORM_BINARY})" \\\$cmd
done
            """,
            data = [working_dir, TERRAFORM_BINARY],
            labels = [f"terraform_{last_cmd}"],
        )


def terraform_module(
    name: str,
    url: str,
    hashes: list = [],
    licences: list = [],
    visibility: list = [],
    deps: list = [],
):
    og_module=remote_file(
        name = f"_{name}_download",
        url = url,
        hashes = hashes,
        licences = licences,
        extract = True,
        visibility = visibility,   
    )
    deps=[canonicalise(dep) for dep in deps]
    genrule(
        name = name,
        srcs = {
            "og" : [og_module],
            "deps" : deps,
        },
        outs = [name],
        exported_deps=deps,
        deps=deps,
        visibility=visibility,
        cmd = f"""
set -exuo pipefail
mv $(location {og_module}) $OUTS
if [[ -v SRCS_DEPS ]]; then
    mkdir $OUTS/modules/
    for m in $SRCS_DEPS; do
        replace=$(basename $m)
        search=$(cat "${{m}}/SOURCE_SEARCH")
        find . -name "*.tf" -exec sed -i  "s#[^\\"]*$search[^\\"]*#./modules/$replace#g" {{}} +
        cp -r "$m" $OUTS/modules/
    done
fi
echo "{url}" | cut -f3-5 -d/ > $OUTS/SOURCE_SEARCH
        """,
    )
    

def terraform_provider(
    name: str,
    version: str = None,
    url: str = None,
    hashes: list = [],
    licences: list = [],
    visibility: list = [],
):
    url = url if url else f"https://releases.hashicorp.com/terraform-provider-{name}/{version}/terraform-provider-{name}_{version}_linux_amd64.zip"
    provider_download=remote_file(
        name = f"_{name}_download",
        url = url,
        hashes = hashes,
        licences = licences,
    )
    provider=genrule(
        name = name,
        srcs = [provider_download],
        # We extract the binary into a directory here 
        # to preserve the filename which is usually
        # terraform-provider-aws_v2.70.0_x4
        cmd = "unzip $SRCS -d tmp && mkdir $OUTS && mv tmp/* $OUTS/",
        outs = [name],
        visibility = visibility,
    )
